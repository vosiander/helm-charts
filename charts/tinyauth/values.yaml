# Default values for tinyauth.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/steveiliop56/tinyauth
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Environment variables for Tinyauth configuration
# These match the Tinyauth documentation: https://github.com/steveiliop56/tinyauth
env:
  - name: ADDRESS
    value: "0.0.0.0"
  - name: PORT
    value: "3000"
  # - name: APP_URL
  #   value: ""  # REQUIRED - Set to your external URL (e.g., https://auth.example.com)
  - name: APP_TITLE
    value: "Tinyauth"
  - name: BACKGROUND_IMAGE
    value: "/background.jpg"
  - name: DATABASE_PATH
    value: "/data/tinyauth.db"
  - name: DISABLE_ANALYTICS
    value: "true"
  - name: DISABLE_RESOURCES
    value: "false"
  # - name: FORGOT_PASSWORD_MESSAGE
  #   value: ""  # Custom message for forgot password page
  - name: LOG_LEVEL
    value: "info"
  - name: LOGIN_MAX_RETRIES
    value: "5"
  - name: LOGIN_TIMEOUT
    value: "300"
  # - name: OAUTH_AUTO_REDIRECT
  #   value: ""  # Provider ID to auto-redirect (e.g., "google")
  # - name: OAUTH_WHITELIST
  #   value: ""  # Comma-separated list of allowed email domains
  - name: RESOURCES_DIR
    value: "/data/resources"
  - name: SECURE_COOKIE
    value: "false"
  - name: SESSION_EXPIRY
    value: "86400"
  # - name: TRUSTED_PROXIES
  #   value: ""  # Comma-separated list of trusted proxy IPs

# Tinyauth-specific configuration
tinyauth:
  # USERS configuration (bcrypt hashed)
  # Format: username:bcrypthash:totp (comma-separated for multiple users)
  # Example: admin:$2a$10$...:,user:$2a$10$...:JBSWY3DPEHPK3PXP
  # Leave empty if not using local authentication
  users: ""
  
  # Alternative: Reference to existing secret containing users
  # If set, this takes precedence over users value above
  usersFile: ""
  # existingSecret: "tinyauth-users"
  # existingSecretKey: "users"

# LDAP Configuration
ldap:
  enabled: false
  # LDAP server address (e.g., ldap://ldap.example.com:389)
  address: ""
  # Base DN for user searches (e.g., ou=users,dc=example,dc=com)
  baseDn: ""
  # Bind DN for LDAP connection (e.g., cn=admin,dc=example,dc=com)
  bindDn: ""
  # Bind password for LDAP connection
  bindPassword: ""
  # Alternative: Reference to existing secret containing bind password
  bindPasswordFile: ""
  # existingSecret: "ldap-credentials"
  # existingSecretKey: "password"
  # Skip TLS certificate verification (not recommended for production)
  insecure: false
  # LDAP search filter (default: (uid=%s))
  searchFilter: "(uid=%s)"

# OAuth Provider Configuration
# Supports multiple providers: google, github, or custom providers
oauth:
  providers: {}
    # Example Google configuration:
    # google:
    #   clientId: "your-client-id.apps.googleusercontent.com"
    #   clientSecret: "your-client-secret"
    #   # Optional: reference existing secret
    #   # clientSecretFile: ""
    #   # existingSecret: "oauth-google"
    #   # existingSecretKey: "client-secret"
    #
    # Example GitHub configuration:
    # github:
    #   clientId: "your-github-client-id"
    #   clientSecret: "your-github-client-secret"
    #
    # Example custom provider:
    # custom:
    #   clientId: "client-id"
    #   clientSecret: "client-secret"
    #   authUrl: "https://provider.com/oauth/authorize"
    #   tokenUrl: "https://provider.com/oauth/token"
    #   userInfoUrl: "https://provider.com/oauth/userinfo"
    #   redirectUrl: "https://your-app.com/callback"
    #   scopes: "openid,profile,email"
    #   name: "Custom Provider"
    #   insecureSkipVerify: false

# Database persistence configuration
persistence:
  enabled: false
  # Storage class to use (leave empty for default)
  storageClass: ""
  # Size of the persistent volume
  size: 1Gi
  # Access mode
  accessMode: ReadWriteOnce
  # Annotations for the PVC
  annotations: {}

# Additional environment variables
# Use this to add any custom environment variables not covered above
extraEnv: []
  # - name: CUSTOM_VAR
  #   value: "custom-value"
  # - name: SECRET_VAR
  #   valueFrom:
  #     secretKeyRef:
  #       name: my-secret
  #       key: my-key

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 3000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # Standard Nginx Proxy Manager annotations
    # nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    # nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    # nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Expose the service via gateway-api HTTPRoute
# Requires Gateway API resources and suitable controller installed within the cluster
# (see: https://gateway-api.sigs.k8s.io/guides/)
httpRoute:
  # HTTPRoute enabled.
  enabled: false
  # HTTPRoute annotations.
  annotations: {}
  # Which Gateways this Route is attached to.
  parentRefs:
  - name: gateway
    sectionName: http
    # namespace: default
  # Hostnames matching HTTP header.
  hostnames:
  - chart-example.local
  # List of rules and filters applied.
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /api/health
    port: http
readinessProbe:
  httpGet:
    path: /api/health
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
